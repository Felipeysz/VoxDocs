@model VoxDocs.ViewModels.PlanosViewModel

<!-- Toast para mensagens de erro -->
<div class="toast-container position-fixed bottom-0 end-0 p-3">
  <div id="errorToast" class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="d-flex">
      <div class="toast-body" id="toastMessage">
        Mensagem de erro aqui
      </div>
      <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
  </div>
</div>

<!-- Formulário hidden para o token -->
<form id="antiForgeryForm" style="display:none;">
    @Html.AntiForgeryToken()
</form>

<section id="planos" class="py-5">
    <div class="container">
        <h2 class="text-center mb-5 display-5 fw-bold">Nossos Planos</h2>
        <p class="text-center mb-5 lead">Escolha o plano que melhor se adapta às necessidades da sua empresa</p>
        
        @if (!string.IsNullOrEmpty(Model.MensagemErro))
        {
            <div class="alert alert-danger">
                @Model.MensagemErro
            </div>
        }
        
        <div class="row gy-4">
            @if (Model.Planos != null && Model.Planos.Any())
            {
                @foreach (var plano in Model.Planos)
                {
                    var precoMensal = plano.Duracao.HasValue && plano.Duracao > 0 
                        ? plano.Preco / Convert.ToDecimal(plano.Duracao.Value) 
                        : plano.Preco;
                    
                    <div class="col-lg-3 col-md-6" data-aos="fade-up" data-aos-delay="@(100 * Model.Planos.ToList().IndexOf(plano))">
                        <div class="plan-card h-100 @(plano.Nome.Contains("Premium") ? "highlight-card" : "")">
                            @if (plano.Nome.Contains("Premium"))
                            {
                                <div class="highlight-badge">RECOMENDADO</div>
                            }
                            
                            <div class="plan-card-content">
                                <div class="plan-name">@plano.Nome</div>

                                <div class="plan-price">
                                    @if (plano.Preco == 0)
                                    {
                                        <span>Grátis</span>
                                    }
                                    else
                                    {
                                        <span>R$ @precoMensal.ToString("F2")</span>
                                        <small class="text-muted d-block">por mês</small>
                                        <small class="text-muted d-block">@plano.Periodicidade.ToLower()</small>
                                    }
                                </div>

                                <ul class="plan-features list-unstyled">
                                    <li>
                                        <span class="material-symbols-outlined">storage</span>
                                        @(plano.ArmazenamentoDisponivel == 999 ? "Infinito" : 
                                          plano.ArmazenamentoDisponivel == -1 ? "Ilimitado" : $"{plano.ArmazenamentoDisponivel} GB")
                                    </li>
                                    <li>
                                        <span class="material-symbols-outlined">people</span>
                                        @(plano.LimiteUsuario == 999 ? "Infinito" : 
                                          plano.LimiteUsuario == -1 ? "Usuários ilimitados" : $"Até {plano.LimiteUsuario}")
                                    </li>
                                    <li>
                                        <span class="material-symbols-outlined">admin_panel_settings</span>
                                        @(plano.LimiteAdmin == 999 ? "Infinito" : 
                                          plano.LimiteAdmin == -1 ? "Admins ilimitados" : $"Até {plano.LimiteAdmin}")
                                    </li>
                                    <li>
                                        <span class="material-symbols-outlined">description</span>
                                        Documentos ilimitados
                                    </li>
                                    <li>
                                        <span class="material-symbols-outlined">backup</span>
                                        @(plano.Nome.Contains("Premium") ? "Backup diário" : "Backup manual")
                                    </li>
                                    <li>
                                        <span class="material-symbols-outlined">support_agent</span>
                                        @(plano.Nome.Contains("Premium") ? "Suporte 24/7" : "Suporte por e-mail")
                                    </li>
                                </ul>
                            </div>
                            
                            <div class="btn-subscribe-container">
                                <button type="button" class="btn btn-subscribe js-selecionar-plano"
                                        data-plano-id="@plano.Id"
                                        data-plano-nome="@plano.Nome"
                                        data-plano-preco="@plano.Preco">
                                    @(plano.Preco == 0 ? "Começar grátis" : "Assinar agora")
                                </button>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12 text-center">
                    <p class="text-muted">Nenhum plano disponível no momento.</p>
                </div>
            }
        </div>
    </div>
</section>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.js"></script>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Inicializa AOS
        if (typeof AOS !== 'undefined') {
            AOS.init({
                once: true,
                duration: 800
            });
        }
        
        // Adiciona event listeners para todos os botões de seleção de plano
        document.querySelectorAll('.js-selecionar-plano').forEach(button => {
            button.addEventListener('click', function(e) {
                console.log('Botão clicado'); // Debug
                
                const planoId = this.getAttribute('data-plano-id');
                const planoNome = this.getAttribute('data-plano-nome');
                const planoPreco = this.getAttribute('data-plano-preco');
                
                console.log('Dados do plano:', {planoId, planoNome, planoPreco}); // Debug
                
                // Cria formulário dinâmico
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '@Url.Action("SelecionarPlano", "Pagamento")';
                form.style.display = 'none';
                
                // Adiciona token anti-forgery
                const token = document.querySelector('#antiForgeryForm input[name="__RequestVerificationToken"]');
                if (token) {
                    const tokenClone = token.cloneNode(true);
                    console.log('Token encontrado:', tokenClone); // Debug
                    form.appendChild(tokenClone);
                } else {
                    console.error('Token anti-forgery não encontrado!');
                }
                
                // Adiciona campos do plano
                function addHiddenInput(name, value) {
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = name;
                    input.value = value;
                    form.appendChild(input);
                }
                
                addHiddenInput('planoId', planoId);
                addHiddenInput('planoNome', planoNome);
                addHiddenInput('planoPreco', planoPreco);
                
                // Adiciona formulário ao body
                document.body.appendChild(form);
                console.log('Formulário criado:', form); // Debug
                
                // Submete o formulário
                form.submit();
            });
        });
        
        // Função global para mostrar mensagens de erro
        window.mostrarMensagemErro = function(mensagem) {
            const toastEl = document.getElementById('errorToast');
            if (toastEl) {
                const toast = new bootstrap.Toast(toastEl);
                document.getElementById('toastMessage').textContent = mensagem;
                toast.show();
            } else {
                alert(mensagem);
            }
        };
    });
    </script>