@model VoxDocs.Models.SuporteDetailsViewModel
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@{
    ViewData["Title"] = "Chamado Resolvido - VoxDocs";
    Layout = null;
    var isCreatedByCurrentUser = HttpContextAccessor.HttpContext.User.Identity.Name == Model.CriadoPor;
}

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet">

    <style>
        :root {
            --color-primary: #774C9E;
            --color-accent: #6CD3DC;
            --color-secondary: #f8f9fa;
            --text-muted: #666;
            --card-radius: 0.75rem;
            --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            --shadow: rgba(0,0,0,0.05);
            --status-resolved: #d1ecf1;
            --status-resolved-text: #0c5460;
            --status-banner: #d4edda;
            --status-banner-text: #155724;
            --creator-bg: rgba(119, 76, 158, 0.1);
            --creator-text: #774C9E;
            --responsible-bg: rgba(108, 211, 220, 0.1);
            --responsible-text: #0c5460;
            --awaiting-bg: rgba(108, 117, 125, 0.1);
            --awaiting-text: #495057;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: #f8f9fa;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            padding: 1rem;
            margin: 0;
            color: #333;
            animation: pageEntrance 0.8s ease-out;
            overflow-x: hidden;
        }

        @@keyframes pageEntrance {
            from {
                opacity: 0;
                transform: translateY(-50px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .container {
            max-width: 900px;
            width: 100%;
        }

        .card {
            background: white;
            border-radius: var(--card-radius);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            position: relative;
            animation: cardEntrance 0.8s ease-out 0.2s both;
            transition: transform 0.6s ease, opacity 0.4s ease;
            display: flex;
            flex-direction: column;
            height: 80vh;
        }

        @@keyframes cardEntrance {
            from {
                opacity: 0;
                transform: translateY(30px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .status-banner {
            background: var(--status-banner);
            color: var(--status-banner-text);
            padding: 1rem;
            text-align: center;
            font-weight: 600;
            font-size: 0.9rem;
            border-radius: var(--card-radius) var(--card-radius) 0 0;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .user-ticket-banner {
            background: rgba(108, 211, 220, 0.1);
            border-left: 3px solid var(--color-accent);
        }

        .card-header {
            padding: 1.5rem;
            border-bottom: 1px solid #eee;
            display: flex;
            align-items: center;
            justify-content: space-between;
            background: white;
        }

        .card-title {
            font-weight: 600;
            color: var(--color-primary);
            font-size: 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin: 0;
        }

        .user-indicator {
            display: inline-flex;
            align-items: center;
            gap: 0.3rem;
            padding: 0.3rem 0.6rem;
            border-radius: 1rem;
            font-size: 0.8rem;
            margin-left: 0.5rem;
        }

        .creator-indicator {
            background-color: var(--creator-bg);
            color: var(--creator-text);
            border: 1px solid var(--creator-text);
        }

        .responsible-indicator {
            background-color: var(--responsible-bg);
            color: var(--responsible-text);
            border: 1px solid var(--responsible-text);
        }

        .awaiting-indicator {
            background-color: var(--awaiting-bg);
            color: var(--awaiting-text);
            border: 1px solid var(--awaiting-text);
        }

        .ticket-info {
            padding: 1rem 1.5rem;
            display: flex;
            gap: 1.5rem;
            font-size: 0.9rem;
            background: var(--color-secondary);
            border-bottom: 1px solid #eee;
            flex-wrap: wrap;
        }

            .ticket-info span {
                display: flex;
                align-items: center;
                gap: 0.5rem;
            }

        .status-badge {
            padding: 0.35rem 0.75rem;
            border-radius: 1rem;
            font-size: 0.8rem;
            font-weight: 500;
            background-color: var(--status-resolved);
            color: var(--status-resolved-text);
        }

        .conversation {
            flex: 1;
            padding: 1.5rem;
            overflow-y: auto;
            background: var(--color-secondary);
        }

        .message {
            display: flex;
            margin-bottom: 1.5rem;
            animation: fadeIn 0.3s ease-out;
        }

            .message.support {
                justify-content: flex-start;
            }

            .message.user {
                justify-content: flex-end;
            }

        .message-content {
            max-width: 70%;
        }

        .meta {
            font-size: 0.75rem;
            color: var(--text-muted);
            margin-bottom: 0.25rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .bubble {
            padding: 0.85rem 1.25rem;
            border-radius: var(--card-radius);
            box-shadow: 0 2px 6px var(--shadow);
            line-height: 1.5;
        }

        .message.support .bubble {
            background: white;
            color: #333;
            border-radius: 0 var(--card-radius) var(--card-radius) var(--card-radius);
        }

        .message.user .bubble {
            background: linear-gradient(135deg, var(--color-primary), #8E54E9);
            color: white;
            border-radius: var(--card-radius) 0 var(--card-radius) var(--card-radius);
        }

        .action-btn {
            background: transparent;
            border: none;
            cursor: pointer;
            width: 2.5rem;
            height: 2.5rem;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            transition: var(--transition);
        }

            .action-btn::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                border-radius: 50%;
                background: var(--color-primary);
                opacity: 0;
                transform: scale(0.8);
                transition: var(--transition);
                z-index: 0;
            }

            .action-btn span {
                position: relative;
                z-index: 1;
                color: var(--color-primary);
                transition: var(--transition);
                font-size: 1.25rem;
            }

            .action-btn:hover {
                transform: translateY(-3px);
            }

                .action-btn:hover::before {
                    opacity: 0.1;
                    transform: scale(1);
                }

                .action-btn:hover span {
                    transform: scale(1.1);
                    color: var(--color-accent);
                }

        @@media (max-width: 768px) {
            .card {
                height: 90vh;
            }

            .card-header {
                padding: 1rem;
            }

            .card-title {
                font-size: 1.2rem;
            }

            .ticket-info {
                flex-direction: column;
                gap: 0.5rem;
            }

            .message-content {
                max-width: 85%;
            }
        }

        @@media (max-width: 576px) {
            .card-title {
                font-size: 1.1rem;
            }

            .status-banner {
                font-size: 0.8rem;
                padding: 0.75rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="card">
            <div class="status-banner @(isCreatedByCurrentUser ? "user-ticket-banner" : "")">
                <span class="material-symbols-outlined">check_circle</span>
                @if (isCreatedByCurrentUser)
                {
                    <span>Seu problema foi resolvido! Obrigado por usar o VoxDocs.</span>
                }
                else
                {
                    <span>Problema resolvido. Chamado será arquivado em breve.</span>
                }
            </div>

            <div class="card-header">
                <div style="display: flex; align-items: center; gap: 1rem;">
                    <a asp-action="SuporteList" class="action-btn" title="Voltar">
                        <span class="material-symbols-outlined">arrow_back</span>
                    </a>
                    <h1 class="card-title">
                        Chamado @Model.Id: @Model.Assunto
                    </h1>
                </div>
            </div>

            <div class="ticket-info">
                <span><strong>Status:</strong> <span class="status-badge">@Model.Status</span></span>
                <span><strong>Criado em:</strong> @Model.DataCriacao.ToString("dd/MM/yyyy HH:mm")</span>
                <span>
                    <strong>Criado por:</strong>
                    <span class="user-indicator creator-indicator">
                        <span class="material-symbols-outlined" style="font-size: 1rem;">person</span>
                        @Model.CriadoPor
                    </span>
                </span>
                <span>
                    <strong>Responsável:</strong>
                    @if (!string.IsNullOrEmpty(Model.Responsavel))
                    {
                        <span class="user-indicator responsible-indicator">
                            <span class="material-symbols-outlined" style="font-size: 1rem;">engineering</span>
                            @Model.Responsavel
                        </span>
                    }
                    else
                    {
                        <span class="user-indicator awaiting-indicator">
                            <span class="material-symbols-outlined" style="font-size: 1rem;">hourglass_empty</span>
                            Em Aberto
                        </span>
                    }
                </span>
                @if (Model.DataResolucao.HasValue)
                {
                    <span><strong>Resolvido em:</strong> @Model.DataResolucao.Value.ToString("dd/MM/yyyy HH:mm")</span>
                }
            </div>

            <div class="conversation" id="conversation">
                @foreach (var mensagem in Model.Mensagens)
                {
                    <div class="message @(mensagem.Origem == "Suporte" ? "support" : "user")">
                        <div class="message-content">
                            <div class="meta">
                                <span>@mensagem.Remetente</span>
                                <span>•</span>
                                <span>@mensagem.DataEnvio.ToString("dd/MM/yyyy HH:mm")</span>
                            </div>
                            <div class="bubble">@mensagem.Conteudo</div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <script>
        // Adiciona efeito de hover no botão de voltar
        document.querySelector('.action-btn').addEventListener('mouseenter', function() {
            this.querySelector('span').style.transform = 'translateX(-3px)';
        });

        document.querySelector('.action-btn').addEventListener('mouseleave', function() {
            this.querySelector('span').style.transform = '';
        });

        // Rolagem automática para o final da conversa
        function scrollToBottom() {
            const conversation = document.getElementById('conversation');
            conversation.scrollTop = conversation.scrollHeight;
        }

        window.addEventListener('load', scrollToBottom);
        document.addEventListener('DOMContentLoaded', scrollToBottom);

        // Verifica atualizações periodicamente (simulação)
        setInterval(() => {
            fetch(`/Suporte/VerificarAtualizacao/${@Model.Id}`)
                .then(response => response.json())
                .then(data => {
                    if (data.atualizado) {
                        location.reload();
                    }
                });
        }, 5000);
    </script>
</body>
</html>